generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            BigInt    @id @default(autoincrement())
  accountId     BigInt    @unique @map("account_id")
  username      String?
  hasPass       Boolean   @default(false) @map("has_pass")
  passExpiresAt DateTime? @map("pass_expires_at")
  registeredAt  DateTime  @default(now()) @map("registered_at")

  cards UserCard[]
  packs UserPack[]

  player1   GameLog[] @relation("Player1GameLog")
  player2   GameLog[] @relation("Player2GameLog")
  victories GameLog[] @relation("WinnerGameLog")
  defeats   GameLog[] @relation("LoserGameLog")

  @@map("user")
}

model Card {
  id              BigInt   @id @default(autoincrement())
  artist          String
  type            CardType
  image           String   @unique
  vocabulary      Int
  fame            Int
  originality     Int
  versatility     Int
  livePerformance Int      @map("live_performance")

  users UserCard[]

  @@map("card")
}

enum CardType {
  DEFAULT
  AUTOGRAPH
  SEASON
  LIMITED
  LEGENDARY
}

model UserCard {
  id          BigInt   @id @default(autoincrement())
  acquiredAt  DateTime @default(now()) @map("acquired_at")
  isAvailable Boolean  @default(true) @map("is_available")
  lvl         Int      @default(1)
  dupes       Int      @default(0)

  accountId BigInt @map("account_id")
  cardId    BigInt @map("card_id")

  user User @relation(fields: [accountId], references: [accountId])
  card Card @relation(fields: [cardId], references: [id])

  @@map("user_card")
}

model GameLog {
  id       BigInt     @id @default(autoincrement())
  playedAt DateTime   @default(now()) @map("played_at")
  status   GameStatus @default(PENDING)

  player1Id BigInt @map("player1_id")
  player2Id BigInt @map("player2_id")
  winnerId  BigInt @map("winner_id")
  loserId   BigInt @map("loser_id")

  player1 User @relation("Player1GameLog", fields: [player1Id], references: [id])
  player2 User @relation("Player2GameLog", fields: [player2Id], references: [id])
  winner  User @relation("WinnerGameLog", fields: [winnerId], references: [id])
  loser   User @relation("LoserGameLog", fields: [loserId], references: [id])

  @@map("game_log")
}

enum GameStatus {
  PENDING
  ACTIVE
  FINISHED
  CANCELLED
}

model Pack {
  id          BigInt     @id @default(autoincrement())
  rarity      PackRarity
  guaranteed  Json
  chanceBonus Json       @map("chance_bonus")

  users UserPack[]

  @@map("pack")
}

enum PackRarity {
  DEFAULT
  RARE
  EPIC
  MYTHIC
}

model UserPack {
  id         BigInt   @id @default(autoincrement())
  acquiredAt DateTime @default(now()) @map("acquired_at")
  amount     Int      @default(1)

  accountId BigInt @map("user_id")
  packId    BigInt @map("pack_id")

  user User @relation(fields: [accountId], references: [accountId])
  pack Pack @relation(fields: [packId], references: [id])

  @@unique([accountId, packId], name: "accountId_packId")
  @@map("user_pack")
}
