import { Context } from "telegraf";
import { Message } from "telegraf/typings/core/types/typegram";
import UserController from "@controller/UserController";
import { formatDateToDDMMYYYY } from "@utils/utils";
import userActionsLogger from "@infrastructure/logger/userActionsLogger";

export const handleMenu = async (ctx: Context) => {
  const isTextMessage = ctx.message && "text" in ctx.message;

  const meta = {
    userId: ctx.from?.id,
    username: ctx.from?.username,
    text: isTextMessage ? (ctx.message as Message.TextMessage).text : undefined,
  };

  await ctx.reply("‚öôÔ∏è –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ");

  userActionsLogger("info", "handleMenu", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à–µ–ª –≤ –º–µ–Ω—é", meta);
};

export const handleProfile = async (ctx: Context) => {
  const accountId = ctx.from?.id;
  const isTextMessage = ctx.message && "text" in ctx.message;

  const meta = {
    userId: ctx.from?.id,
    username: ctx.from?.username,
    text: isTextMessage ? (ctx.message as Message.TextMessage).text : undefined,
  };

  try {
    if (!accountId) {
      userActionsLogger(
        "error",
        "handleProfile",
        "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        meta
      );
      return ctx.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à Telegram ID");
    }

    const user = await UserController.getByAccountId(accountId);

    if (!user) {
      userActionsLogger(
        "error",
        "handleProfile",
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
        meta
      );
      return ctx.reply("‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.");
    }

    await ctx.reply(
      `üëã –ü—Ä–∏–≤–µ—Ç, ${
        user.username ?? "–∏–≥—Ä–æ–∫"
      }\nüìÜ –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è ${formatDateToDDMMYYYY(
        user.registeredAt
      )}\nüëë –°—Ç–∞—Ç—É—Å –ø–∞—Å—Å–∞: ${user.hasPass ? "–∞–∫—Ç–∏–≤–µ–Ω" : "–Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"}`
    );

    userActionsLogger(
      "info",
      "handleProfile",
      "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à–µ–ª –≤ –ø—Ä–æ—Ñ–∏–ª—å",
      meta
    );
  } catch (error) {
    await ctx.reply("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");

    userActionsLogger(
      "error",
      "handleProfile",
      `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å: ${(error as Error).message}`,
      meta
    );
  }
};
