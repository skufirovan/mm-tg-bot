import { Context } from "telegraf";
import UserController from "@controller/UserController";
import { keyboards } from "@infrastructure/telegram/keyboard";
import userActionsLogger from "@infrastructure/logger/userActionsLogger";

export const handleStart = async (ctx: Context) => {
  const meta = {
    userId: ctx.from?.id,
    username: ctx.from?.username,
  };

  try {
    const accountId = ctx.from?.id;
    const username = ctx.from?.username ?? null;

    if (!accountId) {
      userActionsLogger(
        "error",
        "handleStart",
        "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        meta
      );
      return ctx.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à Telegram ID");
    }

    await UserController.register(accountId, username);

    await ctx.reply(`üëã –í–æ—Å–∞–ø —Ö–æ—É–º–∏`, keyboards.main);

    userActionsLogger("info", "handleStart", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª /start", meta);
  } catch (error) {
    await ctx.reply("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");

    userActionsLogger(
      "error",
      "handleStart",
      `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ /start: ${(error as Error).message}`,
      meta
    );
  }
};
